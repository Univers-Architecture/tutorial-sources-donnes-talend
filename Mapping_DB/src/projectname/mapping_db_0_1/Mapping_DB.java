// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package projectname.mapping_db_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Mapping_DB Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.1.20141207_1530
 * @status 
 */
public class Mapping_DB implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (fileErrorName != null) {

				this.setProperty("fileErrorName", fileErrorName.toString());

			}

			if (nameOkFile != null) {

				this.setProperty("nameOkFile", nameOkFile.toString());

			}

			if (msgErreur != null) {

				this.setProperty("msgErreur", msgErreur.toString());

			}

			if (ErrorSJob != null) {

				this.setProperty("ErrorSJob", ErrorSJob.toString());

			}

			if (SSJobOK != null) {

				this.setProperty("SSJobOK", SSJobOK.toString());

			}

			if (PasseJobSuivant != null) {

				this.setProperty("PasseJobSuivant", PasseJobSuivant.toString());

			}

		}

		public String fileErrorName;

		public String getFileErrorName() {
			return this.fileErrorName;
		}

		public String nameOkFile;

		public String getNameOkFile() {
			return this.nameOkFile;
		}

		public String msgErreur;

		public String getMsgErreur() {
			return this.msgErreur;
		}

		public String ErrorSJob;

		public String getErrorSJob() {
			return this.ErrorSJob;
		}

		public String SSJobOK;

		public String getSSJobOK() {
			return this.SSJobOK;
		}

		public String PasseJobSuivant;

		public String getPasseJobSuivant() {
			return this.PasseJobSuivant;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Mapping_DB";
	private final String projectName = "PROJECTNAME";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Mapping_DB.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Mapping_DB.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				} catch (TalendException e) {
					// do nothing
				}

			}
		}
	}

	public void Implicit_Context_Delimited_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		Implicit_Context_Context_error(exception, errorComponent, globalMap);

	}

	public void Implicit_Context_Context_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		Implicit_Context_Delimited_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tOracleInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tWarn_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSendMail_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSendMail_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSendMail_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlConnection_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleConnection_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tOracleConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void Implicit_Context_Delimited_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSendMail_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlConnection_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleConnection_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tWarn_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}
	}

	public void tWarn_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row_Implicit_Context_DelimitedStruct
			implements
			routines.system.IPersistableRow<row_Implicit_Context_DelimitedStruct> {
		final static byte[] commonByteArrayLock_PROJECTNAME_Mapping_DB = new byte[0];
		static byte[] commonByteArray_PROJECTNAME_Mapping_DB = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNAME_Mapping_DB.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNAME_Mapping_DB.length == 0) {
						commonByteArray_PROJECTNAME_Mapping_DB = new byte[1024];
					} else {
						commonByteArray_PROJECTNAME_Mapping_DB = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNAME_Mapping_DB, 0, length);
				strReturn = new String(commonByteArray_PROJECTNAME_Mapping_DB,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNAME_Mapping_DB) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_Implicit_Context_DelimitedStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void Implicit_Context_DelimitedProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("Implicit_Context_Delimited_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_Implicit_Context_DelimitedStruct row_Implicit_Context_Delimited = new row_Implicit_Context_DelimitedStruct();

				/**
				 * [Implicit_Context_Context begin ] start
				 */

				ok_Hash.put("Implicit_Context_Context", false);
				start_Hash.put("Implicit_Context_Context",
						System.currentTimeMillis());

				currentVirtualComponent = "Implicit_Context_Context";

				currentComponent = "Implicit_Context_Context";

				int tos_count_Implicit_Context_Context = 0;

				java.util.List<String> assignList_Implicit_Context_Context = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_Implicit_Context_Context = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_Implicit_Context_Context = new java.util.ArrayList<String>();
				int nb_line_Implicit_Context_Context = 0;

				/**
				 * [Implicit_Context_Context begin ] stop
				 */

				/**
				 * [Implicit_Context_Delimited begin ] start
				 */

				ok_Hash.put("Implicit_Context_Delimited", false);
				start_Hash.put("Implicit_Context_Delimited",
						System.currentTimeMillis());

				currentVirtualComponent = "Implicit_Context_Delimited";

				currentComponent = "Implicit_Context_Delimited";

				int tos_count_Implicit_Context_Delimited = 0;

				int nb_line_Implicit_Context_Delimited = 0;
				org.talend.fileprocess.FileInputDelimited fid_Implicit_Context_Delimited = null;
				try {

					Object filename_Implicit_Context_Delimited = "C:/PROJET_TALEND/PRODUCTION/RAPPORT/CONTEXT/context.txt";
					if (filename_Implicit_Context_Delimited instanceof java.io.InputStream) {

						int footer_value_Implicit_Context_Delimited = 0, random_value_Implicit_Context_Delimited = -1;
						if (footer_value_Implicit_Context_Delimited > 0
								|| random_value_Implicit_Context_Delimited > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_Implicit_Context_Delimited = new org.talend.fileprocess.FileInputDelimited(
								"C:/PROJET_TALEND/PRODUCTION/RAPPORT/CONTEXT/context.txt",
								"ISO-8859-15", "=", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_Implicit_Context_Delimited != null
							&& fid_Implicit_Context_Delimited.nextRecord()) {

						row_Implicit_Context_Delimited = null;

						boolean whetherReject_Implicit_Context_Delimited = false;
						row_Implicit_Context_Delimited = new row_Implicit_Context_DelimitedStruct();
						try {

							int columnIndexWithD_Implicit_Context_Delimited = 0;

							columnIndexWithD_Implicit_Context_Delimited = 0;

							row_Implicit_Context_Delimited.key = fid_Implicit_Context_Delimited
									.get(columnIndexWithD_Implicit_Context_Delimited);

							columnIndexWithD_Implicit_Context_Delimited = 1;

							row_Implicit_Context_Delimited.value = fid_Implicit_Context_Delimited
									.get(columnIndexWithD_Implicit_Context_Delimited);

						} catch (java.lang.Exception e) {
							whetherReject_Implicit_Context_Delimited = true;

							System.err.println(e.getMessage());
							row_Implicit_Context_Delimited = null;

						}

						/**
						 * [Implicit_Context_Delimited begin ] stop
						 */

						/**
						 * [Implicit_Context_Delimited main ] start
						 */

						currentVirtualComponent = "Implicit_Context_Delimited";

						currentComponent = "Implicit_Context_Delimited";

						tos_count_Implicit_Context_Delimited++;

						/**
						 * [Implicit_Context_Delimited main ] stop
						 */
						// Start of branch "row_Implicit_Context_Delimited"
						if (row_Implicit_Context_Delimited != null) {

							/**
							 * [Implicit_Context_Context main ] start
							 */

							currentVirtualComponent = "Implicit_Context_Context";

							currentComponent = "Implicit_Context_Context";

							// ////////////////////////
							String tmp_key_Implicit_Context_Context = null;

							String key_Implicit_Context_Context = null;
							if (row_Implicit_Context_Delimited.key != null) {
								tmp_key_Implicit_Context_Context = row_Implicit_Context_Delimited.key
										.trim();
								if ((tmp_key_Implicit_Context_Context
										.startsWith("#") || tmp_key_Implicit_Context_Context
										.startsWith("!"))) {
									tmp_key_Implicit_Context_Context = null;
								} else {
									row_Implicit_Context_Delimited.key = tmp_key_Implicit_Context_Context;
								}
							}
							if (row_Implicit_Context_Delimited.key != null) {

								key_Implicit_Context_Context =

								row_Implicit_Context_Delimited.key;

							}

							String value_Implicit_Context_Context = null;
							if (row_Implicit_Context_Delimited.value != null) {

								value_Implicit_Context_Context =

								row_Implicit_Context_Delimited.value;

							}

							if (tmp_key_Implicit_Context_Context != null) {
								try {
									if (key_Implicit_Context_Context != null
											&& "fileErrorName"
													.equals(key_Implicit_Context_Context)) {
										context.fileErrorName = value_Implicit_Context_Context;
									}

									if (key_Implicit_Context_Context != null
											&& "nameOkFile"
													.equals(key_Implicit_Context_Context)) {
										context.nameOkFile = value_Implicit_Context_Context;
									}

									if (key_Implicit_Context_Context != null
											&& "msgErreur"
													.equals(key_Implicit_Context_Context)) {
										context.msgErreur = value_Implicit_Context_Context;
									}

									if (key_Implicit_Context_Context != null
											&& "ErrorSJob"
													.equals(key_Implicit_Context_Context)) {
										context.ErrorSJob = value_Implicit_Context_Context;
									}

									if (key_Implicit_Context_Context != null
											&& "SSJobOK"
													.equals(key_Implicit_Context_Context)) {
										context.SSJobOK = value_Implicit_Context_Context;
									}

									if (key_Implicit_Context_Context != null
											&& "PasseJobSuivant"
													.equals(key_Implicit_Context_Context)) {
										context.PasseJobSuivant = value_Implicit_Context_Context;
									}

									if (context
											.getProperty(key_Implicit_Context_Context) != null) {
										assignList_Implicit_Context_Context
												.add(key_Implicit_Context_Context);
									} else {
										newPropertyList_Implicit_Context_Context
												.add(key_Implicit_Context_Context);
									}
									context.setProperty(
											key_Implicit_Context_Context,
											value_Implicit_Context_Context);
								} catch (java.lang.Exception e) {

									System.err
											.println("Setting a value for the key \""
													+ key_Implicit_Context_Context
													+ "\" has failed. Error message: "
													+ e.getMessage());
								}
								nb_line_Implicit_Context_Context++;
							}
							// ////////////////////////

							tos_count_Implicit_Context_Context++;

							/**
							 * [Implicit_Context_Context main ] stop
							 */

						} // End of branch "row_Implicit_Context_Delimited"

						/**
						 * [Implicit_Context_Delimited end ] start
						 */

						currentVirtualComponent = "Implicit_Context_Delimited";

						currentComponent = "Implicit_Context_Delimited";

					}
				} finally {
					if (!((Object) ("C:/PROJET_TALEND/PRODUCTION/RAPPORT/CONTEXT/context.txt") instanceof java.io.InputStream)) {
						if (fid_Implicit_Context_Delimited != null) {
							fid_Implicit_Context_Delimited.close();
						}
					}
					if (fid_Implicit_Context_Delimited != null) {
						globalMap.put("Implicit_Context_Delimited_NB_LINE",
								fid_Implicit_Context_Delimited.getRowNumber());

					}
				}

				ok_Hash.put("Implicit_Context_Delimited", true);
				end_Hash.put("Implicit_Context_Delimited",
						System.currentTimeMillis());

				/**
				 * [Implicit_Context_Delimited end ] stop
				 */

				/**
				 * [Implicit_Context_Context end ] start
				 */

				currentVirtualComponent = "Implicit_Context_Context";

				currentComponent = "Implicit_Context_Context";

				java.util.Enumeration<?> enu_Implicit_Context_Context = context
						.propertyNames();
				while (enu_Implicit_Context_Context.hasMoreElements()) {
					String key_Implicit_Context_Context = (String) enu_Implicit_Context_Context
							.nextElement();
					if (!assignList_Implicit_Context_Context
							.contains(key_Implicit_Context_Context)
							&& !newPropertyList_Implicit_Context_Context
									.contains(key_Implicit_Context_Context)) {
						noAssignList_Implicit_Context_Context
								.add(key_Implicit_Context_Context);
					}
				}
				for (Object obj_Implicit_Context_Context : newPropertyList_Implicit_Context_Context) {

					System.out
							.println("Warning: Parameter \""
									+ obj_Implicit_Context_Context
									+ "\" is a new parameter of Implicit_Context_Context");
				}
				for (Object obj_Implicit_Context_Context : noAssignList_Implicit_Context_Context) {

					System.out
							.println("Warning: Parameter \""
									+ obj_Implicit_Context_Context
									+ "\" has not been set by Implicit_Context_Context");

				}

				String newPropertyStr_Implicit_Context_Context = newPropertyList_Implicit_Context_Context
						.toString();
				String newProperty_Implicit_Context_Context = newPropertyStr_Implicit_Context_Context
						.substring(1, newPropertyStr_Implicit_Context_Context
								.length() - 1);

				String noAssignStr_Implicit_Context_Context = noAssignList_Implicit_Context_Context
						.toString();
				String noAssign_Implicit_Context_Context = noAssignStr_Implicit_Context_Context
						.substring(
								1,
								noAssignStr_Implicit_Context_Context.length() - 1);

				globalMap.put("Implicit_Context_Context_KEY_NOT_INCONTEXT",
						newProperty_Implicit_Context_Context);
				globalMap.put("Implicit_Context_Context_KEY_NOT_LOADED",
						noAssign_Implicit_Context_Context);

				globalMap.put("Implicit_Context_Context_NB_LINE",
						nb_line_Implicit_Context_Context);

				List<String> parametersToEncrypt_Implicit_Context_Context = new java.util.ArrayList<String>();

				resumeUtil.addLog("NODE", "NODE:Implicit_Context_Context", "",
						Thread.currentThread().getId() + "", "", "", "", "",
						resumeUtil.convertToJsonText(context,
								parametersToEncrypt_Implicit_Context_Context));

				ok_Hash.put("Implicit_Context_Context", true);
				end_Hash.put("Implicit_Context_Context",
						System.currentTimeMillis());

				/**
				 * [Implicit_Context_Context end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [Implicit_Context_Delimited finally ] start
				 */

				currentVirtualComponent = "Implicit_Context_Delimited";

				currentComponent = "Implicit_Context_Delimited";

				/**
				 * [Implicit_Context_Delimited finally ] stop
				 */

				/**
				 * [Implicit_Context_Context finally ] start
				 */

				currentVirtualComponent = "Implicit_Context_Context";

				currentComponent = "Implicit_Context_Context";

				/**
				 * [Implicit_Context_Context finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("Implicit_Context_Delimited_SUBPROCESS_STATE", 1);
	}

	public static class outStruct implements
			routines.system.IPersistableRow<outStruct> {
		final static byte[] commonByteArrayLock_PROJECTNAME_Mapping_DB = new byte[0];
		static byte[] commonByteArray_PROJECTNAME_Mapping_DB = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String INFO1;

		public String getINFO1() {
			return this.INFO1;
		}

		public String INFO2;

		public String getINFO2() {
			return this.INFO2;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final outStruct other = (outStruct) obj;

			if (this.ID != other.ID)
				return false;

			return true;
		}

		public void copyDataTo(outStruct other) {

			other.ID = this.ID;
			other.INFO1 = this.INFO1;
			other.INFO2 = this.INFO2;
			other.email = this.email;

		}

		public void copyKeysDataTo(outStruct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNAME_Mapping_DB.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNAME_Mapping_DB.length == 0) {
						commonByteArray_PROJECTNAME_Mapping_DB = new byte[1024];
					} else {
						commonByteArray_PROJECTNAME_Mapping_DB = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNAME_Mapping_DB, 0, length);
				strReturn = new String(commonByteArray_PROJECTNAME_Mapping_DB,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNAME_Mapping_DB) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.INFO1 = readString(dis);

					this.INFO2 = readString(dis);

					this.email = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.INFO1, dos);

				// String

				writeString(this.INFO2, dos);

				// String

				writeString(this.email, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",INFO1=" + INFO1);
			sb.append(",INFO2=" + INFO2);
			sb.append(",email=" + email);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PROJECTNAME_Mapping_DB = new byte[0];
		static byte[] commonByteArray_PROJECTNAME_Mapping_DB = new byte[0];

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String INFO1;

		public String getINFO1() {
			return this.INFO1;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNAME_Mapping_DB.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNAME_Mapping_DB.length == 0) {
						commonByteArray_PROJECTNAME_Mapping_DB = new byte[1024];
					} else {
						commonByteArray_PROJECTNAME_Mapping_DB = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNAME_Mapping_DB, 0, length);
				strReturn = new String(commonByteArray_PROJECTNAME_Mapping_DB,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNAME_Mapping_DB) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.INFO1 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.INFO1, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",INFO1=" + INFO1);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tOracleInput_1Struct implements
			routines.system.IPersistableRow<after_tOracleInput_1Struct> {
		final static byte[] commonByteArrayLock_PROJECTNAME_Mapping_DB = new byte[0];
		static byte[] commonByteArray_PROJECTNAME_Mapping_DB = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String INFO1;

		public String getINFO1() {
			return this.INFO1;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tOracleInput_1Struct other = (after_tOracleInput_1Struct) obj;

			if (this.ID != other.ID)
				return false;

			return true;
		}

		public void copyDataTo(after_tOracleInput_1Struct other) {

			other.ID = this.ID;
			other.INFO1 = this.INFO1;

		}

		public void copyKeysDataTo(after_tOracleInput_1Struct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNAME_Mapping_DB.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNAME_Mapping_DB.length == 0) {
						commonByteArray_PROJECTNAME_Mapping_DB = new byte[1024];
					} else {
						commonByteArray_PROJECTNAME_Mapping_DB = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNAME_Mapping_DB, 0, length);
				strReturn = new String(commonByteArray_PROJECTNAME_Mapping_DB,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNAME_Mapping_DB) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.INFO1 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.INFO1, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",INFO1=" + INFO1);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tOracleInput_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tMysqlInput_1Process(globalMap);
				tFileInputExcel_1Process(globalMap);

				row1Struct row1 = new row1Struct();
				outStruct out = new outStruct();

				/**
				 * [tFileOutputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_2", false);
				start_Hash
						.put("tFileOutputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_2";

				int tos_count_tFileOutputExcel_2 = 0;

				int nb_line_tFileOutputExcel_2 = 0;

				String fileName_tFileOutputExcel_2 = "C:/Users/Lenovo/Desktop/tutoTalend/allInformation.xls";
				java.io.File file_tFileOutputExcel_2 = new java.io.File(
						fileName_tFileOutputExcel_2);
				boolean isFileGenerated_tFileOutputExcel_2 = true;
				// create directory only if not exists
				java.io.File parentFile_tFileOutputExcel_2 = file_tFileOutputExcel_2
						.getParentFile();
				if (parentFile_tFileOutputExcel_2 != null
						&& !parentFile_tFileOutputExcel_2.exists()) {

					parentFile_tFileOutputExcel_2.mkdirs();

				}

				jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_2 = null;
				jxl.write.WritableSheet writableSheet_tFileOutputExcel_2 = null;

				jxl.WorkbookSettings workbookSettings_tFileOutputExcel_2 = new jxl.WorkbookSettings();
				workbookSettings_tFileOutputExcel_2.setEncoding("ISO-8859-15");
				writeableWorkbook_tFileOutputExcel_2 = new jxl.write.biff.WritableWorkbookImpl(
						new java.io.BufferedOutputStream(
								new java.io.FileOutputStream(
										fileName_tFileOutputExcel_2)), true,
						workbookSettings_tFileOutputExcel_2);

				writableSheet_tFileOutputExcel_2 = writeableWorkbook_tFileOutputExcel_2
						.getSheet("Sheet1");
				if (writableSheet_tFileOutputExcel_2 == null) {
					writableSheet_tFileOutputExcel_2 = writeableWorkbook_tFileOutputExcel_2
							.createSheet("Sheet1",
									writeableWorkbook_tFileOutputExcel_2
											.getNumberOfSheets());
				}

				// modif start
				int startRowNum_tFileOutputExcel_2 = writableSheet_tFileOutputExcel_2
						.getRows();
				// modif end

				int[] fitWidth_tFileOutputExcel_2 = new int[4];
				for (int i_tFileOutputExcel_2 = 0; i_tFileOutputExcel_2 < 4; i_tFileOutputExcel_2++) {
					int fitCellViewSize_tFileOutputExcel_2 = writableSheet_tFileOutputExcel_2
							.getColumnView(i_tFileOutputExcel_2).getSize();
					fitWidth_tFileOutputExcel_2[i_tFileOutputExcel_2] = fitCellViewSize_tFileOutputExcel_2 / 256;
					if (fitCellViewSize_tFileOutputExcel_2 % 256 != 0) {
						fitWidth_tFileOutputExcel_2[i_tFileOutputExcel_2] += 1;
					}
				}

				if (startRowNum_tFileOutputExcel_2 == 0) {
					// modif end
					// modif start
					writableSheet_tFileOutputExcel_2
							.addCell(new jxl.write.Label(0,
									nb_line_tFileOutputExcel_2, "ID"));
					// modif end
					fitWidth_tFileOutputExcel_2[0] = fitWidth_tFileOutputExcel_2[0] > 2 ? fitWidth_tFileOutputExcel_2[0]
							: 2;
					// modif start
					writableSheet_tFileOutputExcel_2
							.addCell(new jxl.write.Label(1,
									nb_line_tFileOutputExcel_2, "INFO1"));
					// modif end
					fitWidth_tFileOutputExcel_2[1] = fitWidth_tFileOutputExcel_2[1] > 5 ? fitWidth_tFileOutputExcel_2[1]
							: 5;
					// modif start
					writableSheet_tFileOutputExcel_2
							.addCell(new jxl.write.Label(2,
									nb_line_tFileOutputExcel_2, "INFO2"));
					// modif end
					fitWidth_tFileOutputExcel_2[2] = fitWidth_tFileOutputExcel_2[2] > 5 ? fitWidth_tFileOutputExcel_2[2]
							: 5;
					// modif start
					writableSheet_tFileOutputExcel_2
							.addCell(new jxl.write.Label(3,
									nb_line_tFileOutputExcel_2, "email"));
					// modif end
					fitWidth_tFileOutputExcel_2[3] = fitWidth_tFileOutputExcel_2[3] > 5 ? fitWidth_tFileOutputExcel_2[3]
							: 5;
					nb_line_tFileOutputExcel_2++;
				}

				/**
				 * [tFileOutputExcel_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				outStruct out_tmp = new outStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tOracleInput_1 begin ] start
				 */

				ok_Hash.put("tOracleInput_1", false);
				start_Hash.put("tOracleInput_1", System.currentTimeMillis());

				currentComponent = "tOracleInput_1";

				int tos_count_tOracleInput_1 = 0;

				int nb_line_tOracleInput_1 = 0;
				java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_2");

				if (((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
						.getSessionTimeZone() == null) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1
							.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1
								.getString(1);
					}
					((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
							.setSessionTimeZone(sessionTimezone_tOracleInput_1);
				}

				java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1
						.createStatement();

				String dbquery_tOracleInput_1 = "select id, info1 from table1";

				globalMap.put("tOracleInput_1_QUERY", dbquery_tOracleInput_1);
				java.sql.ResultSet rs_tOracleInput_1 = null;
				try {
					rs_tOracleInput_1 = stmt_tOracleInput_1
							.executeQuery(dbquery_tOracleInput_1);
					java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1
							.getMetaData();
					int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1
							.getColumnCount();

					String tmpContent_tOracleInput_1 = null;

					while (rs_tOracleInput_1.next()) {
						nb_line_tOracleInput_1++;

						if (colQtyInRs_tOracleInput_1 < 1) {
							row1.ID = 0;
						} else {

							if (rs_tOracleInput_1.getObject(1) != null) {
								row1.ID = rs_tOracleInput_1.getInt(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_1 < 2) {
							row1.INFO1 = null;
						} else {

							tmpContent_tOracleInput_1 = rs_tOracleInput_1
									.getString(2);
							if (tmpContent_tOracleInput_1 != null) {
								row1.INFO1 = tmpContent_tOracleInput_1;
							} else {
								row1.INFO1 = null;
							}
						}

						/**
						 * [tOracleInput_1 begin ] stop
						 */

						/**
						 * [tOracleInput_1 main ] start
						 */

						currentComponent = "tOracleInput_1";

						tos_count_tOracleInput_1++;

						/**
						 * [tOracleInput_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row2"
						// /////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							Object exprKeyValue_row2__id = row1.ID;
							if (exprKeyValue_row2__id == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row2HashKey.id = (int) (Integer) exprKeyValue_row2__id;
							}

							row2HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row2.lookup(row2HashKey);

							} // G_TM_M_091

							if (hasCasePrimitiveKeyWithNull_tMap_1
									|| !tHash_Lookup_row2.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.id = '"
							// + row2HashKey.id + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row3"
						// /////////////////////////////////////////////

						boolean forceLooprow3 = false;

						row3Struct row3ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row3HashKey.id = row2.id;

							row3HashKey.hashCodeDirty = true;

							tHash_Lookup_row3.lookup(row3HashKey);

							if (!tHash_Lookup_row3.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.id = '"
							// + row3HashKey.id + "'");
						} // G 071

						row3Struct row3 = null;

						row3Struct fromLookup_row3 = null;
						row3 = row3Default;

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.hasNext()) { // G 099

							fromLookup_row3 = tHash_Lookup_row3.next();

						} // G 099

						if (fromLookup_row3 != null) {
							row3 = fromLookup_row3;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							out = null;

							if (!rejectedInnerJoin_tMap_1) {

								// # Output table : 'out'
								out_tmp.ID = row1.ID;
								out_tmp.INFO1 = row1.INFO1;
								out_tmp.INFO2 = row2.INFO2;
								out_tmp.email = row3.email;
								out = out_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "out"
						if (out != null) {

							/**
							 * [tFileOutputExcel_2 main ] start
							 */

							currentComponent = "tFileOutputExcel_2";

							// modif start

							jxl.write.WritableCell cell_0_tFileOutputExcel_2 = new jxl.write.Number(
									0, startRowNum_tFileOutputExcel_2
											+ nb_line_tFileOutputExcel_2,

									// modif end
									out.ID);
							// modif start
							// If we keep the cell format from the existing cell
							// in sheet

							// modif ends
							writableSheet_tFileOutputExcel_2
									.addCell(cell_0_tFileOutputExcel_2);
							int currentWith_0_tFileOutputExcel_2 = String
									.valueOf(
											((jxl.write.Number) cell_0_tFileOutputExcel_2)
													.getValue()).trim()
									.length();
							currentWith_0_tFileOutputExcel_2 = currentWith_0_tFileOutputExcel_2 > 10 ? 10
									: currentWith_0_tFileOutputExcel_2;
							fitWidth_tFileOutputExcel_2[0] = fitWidth_tFileOutputExcel_2[0] > currentWith_0_tFileOutputExcel_2 ? fitWidth_tFileOutputExcel_2[0]
									: currentWith_0_tFileOutputExcel_2 + 2;

							if (out.INFO1 != null) {

								// modif start

								jxl.write.WritableCell cell_1_tFileOutputExcel_2 = new jxl.write.Label(
										1, startRowNum_tFileOutputExcel_2
												+ nb_line_tFileOutputExcel_2,

										// modif end
										out.INFO1);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_2
										.addCell(cell_1_tFileOutputExcel_2);
								int currentWith_1_tFileOutputExcel_2 = cell_1_tFileOutputExcel_2
										.getContents().trim().length();
								fitWidth_tFileOutputExcel_2[1] = fitWidth_tFileOutputExcel_2[1] > currentWith_1_tFileOutputExcel_2 ? fitWidth_tFileOutputExcel_2[1]
										: currentWith_1_tFileOutputExcel_2 + 2;
							}

							if (out.INFO2 != null) {

								// modif start

								jxl.write.WritableCell cell_2_tFileOutputExcel_2 = new jxl.write.Label(
										2, startRowNum_tFileOutputExcel_2
												+ nb_line_tFileOutputExcel_2,

										// modif end
										out.INFO2);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_2
										.addCell(cell_2_tFileOutputExcel_2);
								int currentWith_2_tFileOutputExcel_2 = cell_2_tFileOutputExcel_2
										.getContents().trim().length();
								fitWidth_tFileOutputExcel_2[2] = fitWidth_tFileOutputExcel_2[2] > currentWith_2_tFileOutputExcel_2 ? fitWidth_tFileOutputExcel_2[2]
										: currentWith_2_tFileOutputExcel_2 + 2;
							}

							if (out.email != null) {

								// modif start

								jxl.write.WritableCell cell_3_tFileOutputExcel_2 = new jxl.write.Label(
										3, startRowNum_tFileOutputExcel_2
												+ nb_line_tFileOutputExcel_2,

										// modif end
										out.email);
								// modif start
								// If we keep the cell format from the existing
								// cell in sheet

								// modif ends
								writableSheet_tFileOutputExcel_2
										.addCell(cell_3_tFileOutputExcel_2);
								int currentWith_3_tFileOutputExcel_2 = cell_3_tFileOutputExcel_2
										.getContents().trim().length();
								fitWidth_tFileOutputExcel_2[3] = fitWidth_tFileOutputExcel_2[3] > currentWith_3_tFileOutputExcel_2 ? fitWidth_tFileOutputExcel_2[3]
										: currentWith_3_tFileOutputExcel_2 + 2;
							}

							nb_line_tFileOutputExcel_2++;

							tos_count_tFileOutputExcel_2++;

							/**
							 * [tFileOutputExcel_2 main ] stop
							 */

						} // End of branch "out"

						/**
						 * [tOracleInput_1 end ] start
						 */

						currentComponent = "tOracleInput_1";

					}
				} finally {
					stmt_tOracleInput_1.close();

				}

				globalMap.put("tOracleInput_1_NB_LINE", nb_line_tOracleInput_1);

				ok_Hash.put("tOracleInput_1", true);
				end_Hash.put("tOracleInput_1", System.currentTimeMillis());

				/**
				 * [tOracleInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputExcel_2 end ] start
				 */

				currentComponent = "tFileOutputExcel_2";

				writeableWorkbook_tFileOutputExcel_2.write();
				writeableWorkbook_tFileOutputExcel_2.close();

				nb_line_tFileOutputExcel_2 = nb_line_tFileOutputExcel_2 - 1;

				globalMap.put("tFileOutputExcel_2_NB_LINE",
						nb_line_tFileOutputExcel_2);

				ok_Hash.put("tFileOutputExcel_2", true);
				end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());

				tFileInputExcel_3Process(globalMap);

				/**
				 * [tFileOutputExcel_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row3");

			try {

				/**
				 * [tOracleInput_1 finally ] start
				 */

				currentComponent = "tOracleInput_1";

				/**
				 * [tOracleInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_2 finally ] start
				 */

				currentComponent = "tFileOutputExcel_2";

				/**
				 * [tFileOutputExcel_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_PROJECTNAME_Mapping_DB = new byte[0];
		static byte[] commonByteArray_PROJECTNAME_Mapping_DB = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String INFO1;

		public String getINFO1() {
			return this.INFO1;
		}

		public String INFO2;

		public String getINFO2() {
			return this.INFO2;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.ID != other.ID)
				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.ID = this.ID;
			other.INFO1 = this.INFO1;
			other.INFO2 = this.INFO2;
			other.email = this.email;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNAME_Mapping_DB.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNAME_Mapping_DB.length == 0) {
						commonByteArray_PROJECTNAME_Mapping_DB = new byte[1024];
					} else {
						commonByteArray_PROJECTNAME_Mapping_DB = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNAME_Mapping_DB, 0, length);
				strReturn = new String(commonByteArray_PROJECTNAME_Mapping_DB,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNAME_Mapping_DB) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.INFO1 = readString(dis);

					this.INFO2 = readString(dis);

					this.email = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.INFO1, dos);

				// String

				writeString(this.INFO2, dos);

				// String

				writeString(this.email, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",INFO1=" + INFO1);
			sb.append(",INFO2=" + INFO2);
			sb.append(",email=" + email);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				int NB_ITERATE_tSendMail_3 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_1";

				int tos_count_tFlowToIterate_1 = 0;

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_3 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_3", false);
				start_Hash.put("tFileInputExcel_3", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_3";

				int tos_count_tFileInputExcel_3 = 0;

				class RegexUtil_tFileInputExcel_3 {

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

						if (useRegex) {// this part process the regex issue

							jxl.Sheet[] sheets = workbook.getSheets();
							java.util.regex.Pattern pattern = java.util.regex.Pattern
									.compile(oneSheetName);
							for (int i = 0; i < sheets.length; i++) {
								String sheetName = sheets[i].getName();
								java.util.regex.Matcher matcher = pattern
										.matcher(sheetName);
								if (matcher.matches()) {
									jxl.Sheet sheet = workbook
											.getSheet(sheetName);
									if (sheet != null) {
										list.add(sheet);
									}
								}
							}

						} else {
							jxl.Sheet sheet = workbook.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, int index, boolean useRegex) {
						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();
						jxl.Sheet sheet = workbook.getSheet(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}

				RegexUtil_tFileInputExcel_3 regexUtil_tFileInputExcel_3 = new RegexUtil_tFileInputExcel_3();
				final jxl.WorkbookSettings workbookSettings_tFileInputExcel_3 = new jxl.WorkbookSettings();
				workbookSettings_tFileInputExcel_3.setDrawingsDisabled(true);
				workbookSettings_tFileInputExcel_3.setEncoding("ISO-8859-15");

				Object source_tFileInputExcel_3 = "C:/Users/Lenovo/Desktop/tutoTalend/allInformation.xls";
				final jxl.Workbook workbook_tFileInputExcel_3;

				java.io.InputStream toClose_tFileInputExcel_3 = null;
				java.io.BufferedInputStream buffIStreamtFileInputExcel_3 = null;
				try {
					if (source_tFileInputExcel_3 instanceof java.io.InputStream) {
						toClose_tFileInputExcel_3 = (java.io.InputStream) source_tFileInputExcel_3;
						buffIStreamtFileInputExcel_3 = new java.io.BufferedInputStream(
								toClose_tFileInputExcel_3);
						workbook_tFileInputExcel_3 = jxl.Workbook.getWorkbook(
								buffIStreamtFileInputExcel_3,
								workbookSettings_tFileInputExcel_3);
					} else if (source_tFileInputExcel_3 instanceof String) {
						toClose_tFileInputExcel_3 = new java.io.FileInputStream(
								source_tFileInputExcel_3.toString());
						buffIStreamtFileInputExcel_3 = new java.io.BufferedInputStream(
								toClose_tFileInputExcel_3);
						workbook_tFileInputExcel_3 = jxl.Workbook.getWorkbook(
								buffIStreamtFileInputExcel_3,
								workbookSettings_tFileInputExcel_3);
					} else {
						workbook_tFileInputExcel_3 = null;
						throw new java.lang.Exception(
								"The data source should be specified as Inputstream or File Path!");
					}
				} finally {
					try {
						if (buffIStreamtFileInputExcel_3 != null) {
							buffIStreamtFileInputExcel_3.close();
						}
					} catch (Exception e) {
					}
				}
				try {
					java.util.List<jxl.Sheet> sheetList_tFileInputExcel_3 = new java.util.ArrayList<jxl.Sheet>();
					sheetList_tFileInputExcel_3
							.addAll(regexUtil_tFileInputExcel_3
									.getSheets(workbook_tFileInputExcel_3,
											"Sheet1", false));
					if (sheetList_tFileInputExcel_3.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_3 = new java.util.ArrayList<jxl.Sheet>();
					for (jxl.Sheet sheet_FilterNull_tFileInputExcel_3 : sheetList_tFileInputExcel_3) {
						if (sheet_FilterNull_tFileInputExcel_3.getRows() > 0) {
							sheet_FilterNullList_tFileInputExcel_3
									.add(sheet_FilterNull_tFileInputExcel_3);
						}
					}
					sheetList_tFileInputExcel_3 = sheet_FilterNullList_tFileInputExcel_3;
					if (sheetList_tFileInputExcel_3.size() > 0) {
						int nb_line_tFileInputExcel_3 = 0;

						int begin_line_tFileInputExcel_3 = 1;

						int footer_input_tFileInputExcel_3 = 0;

						int end_line_tFileInputExcel_3 = 0;
						for (jxl.Sheet sheet_tFileInputExcel_3 : sheetList_tFileInputExcel_3) {
							end_line_tFileInputExcel_3 += sheet_tFileInputExcel_3
									.getRows();
						}
						end_line_tFileInputExcel_3 -= footer_input_tFileInputExcel_3;
						int limit_tFileInputExcel_3 = -1;
						int start_column_tFileInputExcel_3 = 1 - 1;
						int end_column_tFileInputExcel_3 = sheetList_tFileInputExcel_3
								.get(0).getColumns();
						jxl.Cell[] row_tFileInputExcel_3 = null;
						jxl.Sheet sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3
								.get(0);
						int rowCount_tFileInputExcel_3 = 0;
						int sheetIndex_tFileInputExcel_3 = 0;
						int currentRows_tFileInputExcel_3 = sheetList_tFileInputExcel_3
								.get(0).getRows();

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_3 = new java.text.DecimalFormat(
								"#.####################################");
						char separatorChar_tFileInputExcel_3 = df_tFileInputExcel_3
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_3 = begin_line_tFileInputExcel_3; i_tFileInputExcel_3 < end_line_tFileInputExcel_3; i_tFileInputExcel_3++) {

							int emptyColumnCount_tFileInputExcel_3 = 0;

							if (limit_tFileInputExcel_3 != -1
									&& nb_line_tFileInputExcel_3 >= limit_tFileInputExcel_3) {
								break;
							}

							while (i_tFileInputExcel_3 >= rowCount_tFileInputExcel_3
									+ currentRows_tFileInputExcel_3) {
								rowCount_tFileInputExcel_3 += currentRows_tFileInputExcel_3;
								sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3
										.get(++sheetIndex_tFileInputExcel_3);
								currentRows_tFileInputExcel_3 = sheet_tFileInputExcel_3
										.getRows();
							}
							if (rowCount_tFileInputExcel_3 <= i_tFileInputExcel_3) {
								row_tFileInputExcel_3 = sheet_tFileInputExcel_3
										.getRow(i_tFileInputExcel_3
												- rowCount_tFileInputExcel_3);
							}
							globalMap.put("tFileInputExcel_3_CURRENT_SHEET",
									sheet_tFileInputExcel_3.getName());
							row9 = null;
							String[] temp_row_tFileInputExcel_3 = new String[4];
							int actual_end_column_tFileInputExcel_3 = end_column_tFileInputExcel_3 > row_tFileInputExcel_3.length ? row_tFileInputExcel_3.length
									: end_column_tFileInputExcel_3;
							for (int i = 0; i < 4; i++) {

								if (i + start_column_tFileInputExcel_3 < actual_end_column_tFileInputExcel_3) {

									jxl.Cell cell_tFileInputExcel_3 = row_tFileInputExcel_3[i
											+ start_column_tFileInputExcel_3];
									temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3
											.getContents();

								} else {
									temp_row_tFileInputExcel_3[i] = "";
								}
							}

							boolean whetherReject_tFileInputExcel_3 = false;
							row9 = new row9Struct();
							int curColNum_tFileInputExcel_3 = -1;
							String curColName_tFileInputExcel_3 = "";
							try {
								if (temp_row_tFileInputExcel_3[0].length() > 0) {
									curColNum_tFileInputExcel_3 = 0 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "ID";
									row9.ID = ParserUtils
											.parseTo_int(temp_row_tFileInputExcel_3[0]);
								} else {
									row9.ID = 0;
									emptyColumnCount_tFileInputExcel_3++;
								}
								if (temp_row_tFileInputExcel_3[1].length() > 0) {
									curColNum_tFileInputExcel_3 = 1 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "INFO1";
									row9.INFO1 = temp_row_tFileInputExcel_3[1];
								} else {
									row9.INFO1 = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								if (temp_row_tFileInputExcel_3[2].length() > 0) {
									curColNum_tFileInputExcel_3 = 2 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "INFO2";
									row9.INFO2 = temp_row_tFileInputExcel_3[2];
								} else {
									row9.INFO2 = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								if (temp_row_tFileInputExcel_3[3].length() > 0) {
									curColNum_tFileInputExcel_3 = 3 + start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "email";
									row9.email = temp_row_tFileInputExcel_3[3];
								} else {
									row9.email = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								nb_line_tFileInputExcel_3++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_3 = true;
								System.err.println(e.getMessage());
								row9 = null;
							}

							/**
							 * [tFileInputExcel_3 begin ] stop
							 */

							/**
							 * [tFileInputExcel_3 main ] start
							 */

							currentComponent = "tFileInputExcel_3";

							tos_count_tFileInputExcel_3++;

							/**
							 * [tFileInputExcel_3 main ] stop
							 */
							// Start of branch "row9"
							if (row9 != null) {

								/**
								 * [tFlowToIterate_1 main ] start
								 */

								currentComponent = "tFlowToIterate_1";

								globalMap.put("row9.ID", row9.ID);
								nb_line_tFlowToIterate_1++;

								globalMap.put("row9.INFO1", row9.INFO1);
								nb_line_tFlowToIterate_1++;

								globalMap.put("row9.INFO2", row9.INFO2);
								nb_line_tFlowToIterate_1++;

								globalMap.put("row9.email", row9.email);
								nb_line_tFlowToIterate_1++;

								counter_tFlowToIterate_1++;
								globalMap.put(
										"tFlowToIterate_1_CURRENT_ITERATION",
										counter_tFlowToIterate_1);

								tos_count_tFlowToIterate_1++;

								/**
								 * [tFlowToIterate_1 main ] stop
								 */
								NB_ITERATE_tSendMail_3++;

								/**
								 * [tSendMail_3 begin ] start
								 */

								ok_Hash.put("tSendMail_3", false);
								start_Hash.put("tSendMail_3",
										System.currentTimeMillis());

								currentComponent = "tSendMail_3";

								int tos_count_tSendMail_3 = 0;

								/**
								 * [tSendMail_3 begin ] stop
								 */

								/**
								 * [tSendMail_3 main ] start
								 */

								currentComponent = "tSendMail_3";

								String smtpHost_tSendMail_3 = "smtp.gmail.com";
								String smtpPort_tSendMail_3 = "465";
								String from_tSendMail_3 = ("TAlEND@DATA_FUTURE.com");
								String to_tSendMail_3 = (((String) globalMap
										.get("row9.email"))).replace(";", ",");
								String cc_tSendMail_3 = (("") == null || ""
										.equals("")) ? null : ("").replace(";",
										",");
								String bcc_tSendMail_3 = (("") == null || ""
										.equals("")) ? null : ("").replace(";",
										",");
								String subject_tSendMail_3 = ("Data_Future");

								java.util.List<java.util.Map<String, String>> headers_tSendMail_3 = new java.util.ArrayList<java.util.Map<String, String>>();
								java.util.List<String> attachments_tSendMail_3 = new java.util.ArrayList<String>();
								java.util.List<String> contentTransferEncoding_tSendMail_3 = new java.util.ArrayList<String>();

								String message_tSendMail_3 = (("This mail is send due to a job in Talend ") == null || ""
										.equals("This mail is send due to a job in Talend ")) ? "\"\""
										: ("This mail is send due to a job in Talend ");
								java.util.Properties props_tSendMail_3 = System
										.getProperties();
								props_tSendMail_3.put("mail.smtp.host",
										smtpHost_tSendMail_3);
								props_tSendMail_3.put("mail.smtp.port",
										smtpPort_tSendMail_3);
								props_tSendMail_3.put(
										"mail.mime.encodefilename", "true");
								props_tSendMail_3.put(
										"mail.smtp.starttls.enable", "true");
								java.security.Security
										.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
								props_tSendMail_3.put(
										"mail.smtp.socketFactory.class",
										"javax.net.ssl.SSLSocketFactory");
								props_tSendMail_3.put(
										"mail.smtp.socketFactory.fallback",
										"false");
								props_tSendMail_3.put(
										"mail.smtp.socketFactory.port",
										smtpPort_tSendMail_3);
								try {

									props_tSendMail_3.put("mail.smtp.auth",
											"true");
									javax.mail.Session session_tSendMail_3 = javax.mail.Session
											.getInstance(
													props_tSendMail_3,
													new javax.mail.Authenticator() {
														protected javax.mail.PasswordAuthentication getPasswordAuthentication() {

															final String decryptedPassword_tSendMail_3 = routines.system.PasswordEncryptUtil
																	.decryptPassword("e55dbe8533b14c2746daf2ca0aaa3128");

															return new javax.mail.PasswordAuthentication(
																	"zaydan.malika@gmail.com",
																	decryptedPassword_tSendMail_3);
														}
													});

									javax.mail.Message msg_tSendMail_3 = new javax.mail.internet.MimeMessage(
											session_tSendMail_3);
									msg_tSendMail_3
											.setFrom(new javax.mail.internet.InternetAddress(
													from_tSendMail_3, null));
									msg_tSendMail_3
											.setRecipients(
													javax.mail.Message.RecipientType.TO,
													javax.mail.internet.InternetAddress
															.parse(to_tSendMail_3,
																	false));
									if (cc_tSendMail_3 != null)
										msg_tSendMail_3
												.setRecipients(
														javax.mail.Message.RecipientType.CC,
														javax.mail.internet.InternetAddress
																.parse(cc_tSendMail_3,
																		false));
									if (bcc_tSendMail_3 != null)
										msg_tSendMail_3
												.setRecipients(
														javax.mail.Message.RecipientType.BCC,
														javax.mail.internet.InternetAddress
																.parse(bcc_tSendMail_3,
																		false));
									msg_tSendMail_3
											.setSubject(subject_tSendMail_3);

									for (int i_tSendMail_3 = 0; i_tSendMail_3 < headers_tSendMail_3
											.size(); i_tSendMail_3++) {
										java.util.Map<String, String> header_tSendMail_3 = headers_tSendMail_3
												.get(i_tSendMail_3);
										msg_tSendMail_3
												.setHeader(header_tSendMail_3
														.get("KEY"),
														header_tSendMail_3
																.get("VALUE"));
									}
									msg_tSendMail_3.setSentDate(new Date());
									msg_tSendMail_3
											.setHeader("X-Priority", "3"); // High->1
																			// Normal->3
																			// Low->5
									javax.mail.Multipart mp_tSendMail_3 = new javax.mail.internet.MimeMultipart();
									javax.mail.internet.MimeBodyPart mbpText_tSendMail_3 = new javax.mail.internet.MimeBodyPart();
									mbpText_tSendMail_3.setText(
											message_tSendMail_3, "ISO-8859-15",
											"html");
									mp_tSendMail_3
											.addBodyPart(mbpText_tSendMail_3);

									javax.mail.internet.MimeBodyPart mbpFile_tSendMail_3 = null;

									for (int i_tSendMail_3 = 0; i_tSendMail_3 < attachments_tSendMail_3
											.size(); i_tSendMail_3++) {
										String filename_tSendMail_3 = attachments_tSendMail_3
												.get(i_tSendMail_3);
										javax.activation.FileDataSource fds_tSendMail_3 = null;
										java.io.File file_tSendMail_3 = new java.io.File(
												filename_tSendMail_3);

										if (!file_tSendMail_3.exists()) {
											continue;
										}

										if (file_tSendMail_3.isDirectory()) {
											java.io.File[] subFiles_tSendMail_3 = file_tSendMail_3
													.listFiles();
											for (java.io.File subFile_tSendMail_3 : subFiles_tSendMail_3) {
												if (subFile_tSendMail_3
														.isFile()) {
													fds_tSendMail_3 = new javax.activation.FileDataSource(
															subFile_tSendMail_3
																	.getAbsolutePath());
													mbpFile_tSendMail_3 = new javax.mail.internet.MimeBodyPart();
													mbpFile_tSendMail_3
															.setDataHandler(new javax.activation.DataHandler(
																	fds_tSendMail_3));
													mbpFile_tSendMail_3
															.setFileName(javax.mail.internet.MimeUtility
																	.encodeText(fds_tSendMail_3
																			.getName()));
													if (contentTransferEncoding_tSendMail_3
															.get(i_tSendMail_3)
															.equalsIgnoreCase(
																	"base64")) {
														mbpFile_tSendMail_3
																.setHeader(
																		"Content-Transfer-Encoding",
																		"base64");
													}
													mp_tSendMail_3
															.addBodyPart(mbpFile_tSendMail_3);
												}
											}
										} else {
											mbpFile_tSendMail_3 = new javax.mail.internet.MimeBodyPart();
											fds_tSendMail_3 = new javax.activation.FileDataSource(
													filename_tSendMail_3);
											mbpFile_tSendMail_3
													.setDataHandler(new javax.activation.DataHandler(
															fds_tSendMail_3));
											mbpFile_tSendMail_3
													.setFileName(javax.mail.internet.MimeUtility
															.encodeText(fds_tSendMail_3
																	.getName()));
											if (contentTransferEncoding_tSendMail_3
													.get(i_tSendMail_3)
													.equalsIgnoreCase("base64")) {
												mbpFile_tSendMail_3
														.setHeader(
																"Content-Transfer-Encoding",
																"base64");
											}
											mp_tSendMail_3
													.addBodyPart(mbpFile_tSendMail_3);
										}
									}
									// -- set the content --
									msg_tSendMail_3.setContent(mp_tSendMail_3);
									// add handlers for main MIME types
									javax.activation.MailcapCommandMap mc_tSendMail_3 = (javax.activation.MailcapCommandMap) javax.activation.CommandMap
											.getDefaultCommandMap();
									mc_tSendMail_3
											.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
									mc_tSendMail_3
											.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
									mc_tSendMail_3
											.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
									mc_tSendMail_3
											.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
									mc_tSendMail_3
											.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
									javax.activation.CommandMap
											.setDefaultCommandMap(mc_tSendMail_3);
									// -- Send the message --
									javax.mail.Transport.send(msg_tSendMail_3);
								} catch (java.lang.Exception e) {

									throw (e);

								} finally {
									props_tSendMail_3.remove("mail.smtp.host");
									props_tSendMail_3.remove("mail.smtp.port");

									props_tSendMail_3
											.remove("mail.mime.encodefilename");

									props_tSendMail_3
											.remove("mail.smtp.starttls.enable");

									props_tSendMail_3
											.remove("mail.smtp.socketFactory.class");
									props_tSendMail_3
											.remove("mail.smtp.socketFactory.fallback");
									props_tSendMail_3
											.remove("mail.smtp.socketFactory.port");

									props_tSendMail_3.remove("mail.smtp.auth");
								}

								tos_count_tSendMail_3++;

								/**
								 * [tSendMail_3 main ] stop
								 */

								/**
								 * [tSendMail_3 end ] start
								 */

								currentComponent = "tSendMail_3";

								ok_Hash.put("tSendMail_3", true);
								end_Hash.put("tSendMail_3",
										System.currentTimeMillis());

								/**
								 * [tSendMail_3 end ] stop
								 */

							} // End of branch "row9"

							/**
							 * [tFileInputExcel_3 end ] start
							 */

							currentComponent = "tFileInputExcel_3";

						}

						globalMap.put("tFileInputExcel_3_NB_LINE",
								nb_line_tFileInputExcel_3);

					}

				} finally {

					if (!(source_tFileInputExcel_3 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_3.close();
					}

				}

				ok_Hash.put("tFileInputExcel_3", true);
				end_Hash.put("tFileInputExcel_3", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_3 end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE",
						nb_line_tFlowToIterate_1);

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_3 finally ] start
				 */

				currentComponent = "tFileInputExcel_3";

				/**
				 * [tFileInputExcel_3 finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tSendMail_3 finally ] start
				 */

				currentComponent = "tSendMail_3";

				/**
				 * [tSendMail_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 1);
	}

	public void tWarn_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_2 begin ] start
				 */

				ok_Hash.put("tWarn_2", false);
				start_Hash.put("tWarn_2", System.currentTimeMillis());

				currentComponent = "tWarn_2";

				int tos_count_tWarn_2 = 0;

				/**
				 * [tWarn_2 begin ] stop
				 */

				/**
				 * [tWarn_2 main ] start
				 */

				currentComponent = "tWarn_2";

				resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_2", "", Thread
						.currentThread().getId() + "", "WARN", "",
						"Erreur fichier commande ok", "", "");
				tLogCatcher_1.addMessage("tWarn", "tWarn_2", 4,
						"Erreur fichier commande ok", 42);
				tLogCatcher_1Process(globalMap);
				globalMap.put("tWarn_2_WARN_MESSAGES",
						"Erreur fichier commande ok");
				globalMap.put("tWarn_2_WARN_PRIORITY", 4);
				globalMap.put("tWarn_2_WARN_CODE", 42);

				tos_count_tWarn_2++;

				/**
				 * [tWarn_2 main ] stop
				 */

				/**
				 * [tWarn_2 end ] start
				 */

				currentComponent = "tWarn_2";

				ok_Hash.put("tWarn_2", true);
				end_Hash.put("tWarn_2", System.currentTimeMillis());

				/**
				 * [tWarn_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_2 finally ] start
				 */

				currentComponent = "tWarn_2";

				/**
				 * [tWarn_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_2_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_PROJECTNAME_Mapping_DB = new byte[0];
		static byte[] commonByteArray_PROJECTNAME_Mapping_DB = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String INFO2;

		public String getINFO2() {
			return this.INFO2;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.id = this.id;
			other.INFO2 = this.INFO2;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.id = this.id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNAME_Mapping_DB) {

				try {

					int length = 0;

					this.id = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.INFO2 = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.INFO2, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",INFO2=" + INFO2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tMysqlInput_1 - inputs:(after_tOracleInput_1)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 -
				// inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3) outputs:(out)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tMysqlInput_1 begin ] start
				 */

				ok_Hash.put("tMysqlInput_1", false);
				start_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				currentComponent = "tMysqlInput_1";

				int tos_count_tMysqlInput_1 = 0;

				java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
						.getTime();
				int nb_line_tMysqlInput_1 = 0;
				java.sql.Connection conn_tMysqlInput_1 = null;
				conn_tMysqlInput_1 = (java.sql.Connection) globalMap
						.get("conn_tMysqlConnection_2");

				java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
						.createStatement();

				String dbquery_tMysqlInput_1 = "select id, info2 from table2";

				globalMap.put("tMysqlInput_1_QUERY", dbquery_tMysqlInput_1);
				java.sql.ResultSet rs_tMysqlInput_1 = null;
				try {
					rs_tMysqlInput_1 = stmt_tMysqlInput_1
							.executeQuery(dbquery_tMysqlInput_1);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
							.getMetaData();
					int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1
							.getColumnCount();

					String tmpContent_tMysqlInput_1 = null;

					while (rs_tMysqlInput_1.next()) {
						nb_line_tMysqlInput_1++;

						if (colQtyInRs_tMysqlInput_1 < 1) {
							row2.id = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(1) != null) {
								row2.id = rs_tMysqlInput_1.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 2) {
							row2.INFO2 = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(2);
							if (tmpContent_tMysqlInput_1 != null) {
								row2.INFO2 = tmpContent_tMysqlInput_1;
							} else {
								row2.INFO2 = null;
							}
						}

						/**
						 * [tMysqlInput_1 begin ] stop
						 */

						/**
						 * [tMysqlInput_1 main ] start
						 */

						currentComponent = "tMysqlInput_1";

						tos_count_tMysqlInput_1++;

						/**
						 * [tMysqlInput_1 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.id = row2.id;

						row2_HashRow.INFO2 = row2.INFO2;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tMysqlInput_1 end ] start
						 */

						currentComponent = "tMysqlInput_1";

					}
				} finally {
					if (rs_tMysqlInput_1 != null) {
						rs_tMysqlInput_1.close();
					}
					stmt_tMysqlInput_1.close();
				}
				globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

				ok_Hash.put("tMysqlInput_1", true);
				end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				/**
				 * [tMysqlInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_1 finally ] start
				 */

				currentComponent = "tMysqlInput_1";

				/**
				 * [tMysqlInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_PROJECTNAME_Mapping_DB = new byte[0];
		static byte[] commonByteArray_PROJECTNAME_Mapping_DB = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.id = this.id;
			other.email = this.email;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.id = this.id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNAME_Mapping_DB) {

				try {

					int length = 0;

					this.id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.email = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.email, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",email=" + email);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash
						.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tFileInputExcel_1 - inputs:(after_tOracleInput_1)
				// outputs:(row3,row3) | target node:tAdvancedHash_row3 -
				// inputs:(row3) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3) outputs:(out)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct> getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				class RegexUtil_tFileInputExcel_1 {

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

						if (useRegex) {// this part process the regex issue

							jxl.Sheet[] sheets = workbook.getSheets();
							java.util.regex.Pattern pattern = java.util.regex.Pattern
									.compile(oneSheetName);
							for (int i = 0; i < sheets.length; i++) {
								String sheetName = sheets[i].getName();
								java.util.regex.Matcher matcher = pattern
										.matcher(sheetName);
								if (matcher.matches()) {
									jxl.Sheet sheet = workbook
											.getSheet(sheetName);
									if (sheet != null) {
										list.add(sheet);
									}
								}
							}

						} else {
							jxl.Sheet sheet = workbook.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<jxl.Sheet> getSheets(
							jxl.Workbook workbook, int index, boolean useRegex) {
						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();
						jxl.Sheet sheet = workbook.getSheet(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}

				RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();
				final jxl.WorkbookSettings workbookSettings_tFileInputExcel_1 = new jxl.WorkbookSettings();
				workbookSettings_tFileInputExcel_1.setDrawingsDisabled(true);
				workbookSettings_tFileInputExcel_1.setEncoding("ISO-8859-15");

				Object source_tFileInputExcel_1 = "C:/Users/Lenovo/Desktop/tutoTalend/table3.xls";
				final jxl.Workbook workbook_tFileInputExcel_1;

				java.io.InputStream toClose_tFileInputExcel_1 = null;
				java.io.BufferedInputStream buffIStreamtFileInputExcel_1 = null;
				try {
					if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
						toClose_tFileInputExcel_1 = (java.io.InputStream) source_tFileInputExcel_1;
						buffIStreamtFileInputExcel_1 = new java.io.BufferedInputStream(
								toClose_tFileInputExcel_1);
						workbook_tFileInputExcel_1 = jxl.Workbook.getWorkbook(
								buffIStreamtFileInputExcel_1,
								workbookSettings_tFileInputExcel_1);
					} else if (source_tFileInputExcel_1 instanceof String) {
						toClose_tFileInputExcel_1 = new java.io.FileInputStream(
								source_tFileInputExcel_1.toString());
						buffIStreamtFileInputExcel_1 = new java.io.BufferedInputStream(
								toClose_tFileInputExcel_1);
						workbook_tFileInputExcel_1 = jxl.Workbook.getWorkbook(
								buffIStreamtFileInputExcel_1,
								workbookSettings_tFileInputExcel_1);
					} else {
						workbook_tFileInputExcel_1 = null;
						throw new java.lang.Exception(
								"The data source should be specified as Inputstream or File Path!");
					}
				} finally {
					try {
						if (buffIStreamtFileInputExcel_1 != null) {
							buffIStreamtFileInputExcel_1.close();
						}
					} catch (Exception e) {
					}
				}
				try {
					java.util.List<jxl.Sheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<jxl.Sheet>();
					sheetList_tFileInputExcel_1
							.addAll(regexUtil_tFileInputExcel_1
									.getSheets(workbook_tFileInputExcel_1,
											"Sheet1", false));
					if (sheetList_tFileInputExcel_1.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_1 = new java.util.ArrayList<jxl.Sheet>();
					for (jxl.Sheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
						if (sheet_FilterNull_tFileInputExcel_1.getRows() > 0) {
							sheet_FilterNullList_tFileInputExcel_1
									.add(sheet_FilterNull_tFileInputExcel_1);
						}
					}
					sheetList_tFileInputExcel_1 = sheet_FilterNullList_tFileInputExcel_1;
					if (sheetList_tFileInputExcel_1.size() > 0) {
						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 1;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (jxl.Sheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += sheet_tFileInputExcel_1
									.getRows();
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = -1;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0).getColumns();
						jxl.Cell[] row_tFileInputExcel_1 = null;
						jxl.Sheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0).getRows();

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char separatorChar_tFileInputExcel_1 = df_tFileInputExcel_1
								.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1
									&& nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1
									+ currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRows();
							}
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1
												- rowCount_tFileInputExcel_1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET",
									sheet_tFileInputExcel_1.getName());
							row3 = null;
							row3 = null;
							String[] temp_row_tFileInputExcel_1 = new String[2];
							int actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > row_tFileInputExcel_1.length ? row_tFileInputExcel_1.length
									: end_column_tFileInputExcel_1;
							for (int i = 0; i < 2; i++) {

								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {

									jxl.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1[i
											+ start_column_tFileInputExcel_1];
									temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
											.getContents();

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}

							boolean whetherReject_tFileInputExcel_1 = false;
							row3 = new row3Struct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								if (temp_row_tFileInputExcel_1[0].length() > 0) {
									curColNum_tFileInputExcel_1 = 0 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "id";
									row3.id = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_1[0]);
								} else {
									row3.id = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								if (temp_row_tFileInputExcel_1[1].length() > 0) {
									curColNum_tFileInputExcel_1 = 1 + start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "email";
									row3.email = temp_row_tFileInputExcel_1[1];
								} else {
									row3.email = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_1 = true;
								System.err.println(e.getMessage());
								row3 = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */

							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */
							// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tAdvancedHash_row3 main ] start
								 */

								currentComponent = "tAdvancedHash_row3";

								row3Struct row3_HashRow = new row3Struct();

								row3_HashRow.id = row3.id;

								row3_HashRow.email = row3.email;

								tHash_Lookup_row3.put(row3_HashRow);

								tos_count_tAdvancedHash_row3++;

								/**
								 * [tAdvancedHash_row3 main ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						globalMap.put("tFileInputExcel_1_NB_LINE",
								nb_line_tFileInputExcel_1);

					}

				} finally {

					if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_1.close();
					}

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				tJava_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("Fin du job");

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class outErrorStruct implements
			routines.system.IPersistableRow<outErrorStruct> {
		final static byte[] commonByteArrayLock_PROJECTNAME_Mapping_DB = new byte[0];
		static byte[] commonByteArray_PROJECTNAME_Mapping_DB = new byte[0];

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNAME_Mapping_DB.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNAME_Mapping_DB.length == 0) {
						commonByteArray_PROJECTNAME_Mapping_DB = new byte[1024];
					} else {
						commonByteArray_PROJECTNAME_Mapping_DB = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNAME_Mapping_DB, 0, length);
				strReturn = new String(commonByteArray_PROJECTNAME_Mapping_DB,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNAME_Mapping_DB) {

				try {

					int length = 0;

					this.project = readString(dis);

					this.job = readString(dis);

					this.message = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.message, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("project=" + project);
			sb.append(",job=" + job);
			sb.append(",message=" + message);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outErrorStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_PROJECTNAME_Mapping_DB = new byte[0];
		static byte[] commonByteArray_PROJECTNAME_Mapping_DB = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNAME_Mapping_DB.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNAME_Mapping_DB.length == 0) {
						commonByteArray_PROJECTNAME_Mapping_DB = new byte[1024];
					} else {
						commonByteArray_PROJECTNAME_Mapping_DB = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNAME_Mapping_DB, 0, length);
				strReturn = new String(commonByteArray_PROJECTNAME_Mapping_DB,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNAME_Mapping_DB) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				outErrorStruct outError = new outErrorStruct();

				/**
				 * [tFileOutputExcel_4 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_4", false);
				start_Hash
						.put("tFileOutputExcel_4", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_4";

				int tos_count_tFileOutputExcel_4 = 0;

				int nb_line_tFileOutputExcel_4 = 0;

				String fileName_tFileOutputExcel_4 = "C:/Users/Lenovo/Desktop/tutoTalend/ErrorFile.xls";
				java.io.File file_tFileOutputExcel_4 = new java.io.File(
						fileName_tFileOutputExcel_4);
				boolean isFileGenerated_tFileOutputExcel_4 = true;
				// create directory only if not exists
				java.io.File parentFile_tFileOutputExcel_4 = file_tFileOutputExcel_4
						.getParentFile();
				if (parentFile_tFileOutputExcel_4 != null
						&& !parentFile_tFileOutputExcel_4.exists()) {

					parentFile_tFileOutputExcel_4.mkdirs();

				}

				jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_4 = null;
				jxl.write.WritableSheet writableSheet_tFileOutputExcel_4 = null;

				jxl.WorkbookSettings workbookSettings_tFileOutputExcel_4 = new jxl.WorkbookSettings();
				workbookSettings_tFileOutputExcel_4.setEncoding("ISO-8859-15");
				writeableWorkbook_tFileOutputExcel_4 = new jxl.write.biff.WritableWorkbookImpl(
						new java.io.BufferedOutputStream(
								new java.io.FileOutputStream(
										fileName_tFileOutputExcel_4)), true,
						workbookSettings_tFileOutputExcel_4);

				writableSheet_tFileOutputExcel_4 = writeableWorkbook_tFileOutputExcel_4
						.getSheet("Sheet1");
				if (writableSheet_tFileOutputExcel_4 == null) {
					writableSheet_tFileOutputExcel_4 = writeableWorkbook_tFileOutputExcel_4
							.createSheet("Sheet1",
									writeableWorkbook_tFileOutputExcel_4
											.getNumberOfSheets());
				}

				// modif start
				int startRowNum_tFileOutputExcel_4 = writableSheet_tFileOutputExcel_4
						.getRows();
				// modif end

				int[] fitWidth_tFileOutputExcel_4 = new int[3];
				for (int i_tFileOutputExcel_4 = 0; i_tFileOutputExcel_4 < 3; i_tFileOutputExcel_4++) {
					int fitCellViewSize_tFileOutputExcel_4 = writableSheet_tFileOutputExcel_4
							.getColumnView(i_tFileOutputExcel_4).getSize();
					fitWidth_tFileOutputExcel_4[i_tFileOutputExcel_4] = fitCellViewSize_tFileOutputExcel_4 / 256;
					if (fitCellViewSize_tFileOutputExcel_4 % 256 != 0) {
						fitWidth_tFileOutputExcel_4[i_tFileOutputExcel_4] += 1;
					}
				}

				/**
				 * [tFileOutputExcel_4 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				outErrorStruct outError_tmp = new outErrorStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					row7.type = lcm.getType();
					row7.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row7.priority = lcm.getPriority();
					row7.message = lcm.getMessage();
					row7.code = lcm.getCode();

					row7.moment = java.util.Calendar.getInstance().getTime();

					row7.pid = pid;
					row7.root_pid = rootPid;
					row7.father_pid = fatherPid;

					row7.project = projectName;
					row7.job = jobName;
					row7.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tMap_2 main ] start
					 */

					currentComponent = "tMap_2";

					boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_2 = false;
					boolean mainRowRejected_tMap_2 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
						// ###############################
						// # Output tables

						outError = null;

						// # Output table : 'outError'
						outError_tmp.project = row7.project;
						outError_tmp.job = row7.job;
						outError_tmp.message = row7.message;
						outError = outError_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_2 = false;

					tos_count_tMap_2++;

					/**
					 * [tMap_2 main ] stop
					 */
					// Start of branch "outError"
					if (outError != null) {

						/**
						 * [tFileOutputExcel_4 main ] start
						 */

						currentComponent = "tFileOutputExcel_4";

						if (outError.project != null) {

							// modif start

							jxl.write.WritableCell cell_0_tFileOutputExcel_4 = new jxl.write.Label(
									0, startRowNum_tFileOutputExcel_4
											+ nb_line_tFileOutputExcel_4,

									// modif end
									outError.project);
							// modif start
							// If we keep the cell format from the existing cell
							// in sheet

							// modif ends
							writableSheet_tFileOutputExcel_4
									.addCell(cell_0_tFileOutputExcel_4);
							int currentWith_0_tFileOutputExcel_4 = cell_0_tFileOutputExcel_4
									.getContents().trim().length();
							fitWidth_tFileOutputExcel_4[0] = fitWidth_tFileOutputExcel_4[0] > currentWith_0_tFileOutputExcel_4 ? fitWidth_tFileOutputExcel_4[0]
									: currentWith_0_tFileOutputExcel_4 + 2;
						}

						if (outError.job != null) {

							// modif start

							jxl.write.WritableCell cell_1_tFileOutputExcel_4 = new jxl.write.Label(
									1, startRowNum_tFileOutputExcel_4
											+ nb_line_tFileOutputExcel_4,

									// modif end
									outError.job);
							// modif start
							// If we keep the cell format from the existing cell
							// in sheet

							// modif ends
							writableSheet_tFileOutputExcel_4
									.addCell(cell_1_tFileOutputExcel_4);
							int currentWith_1_tFileOutputExcel_4 = cell_1_tFileOutputExcel_4
									.getContents().trim().length();
							fitWidth_tFileOutputExcel_4[1] = fitWidth_tFileOutputExcel_4[1] > currentWith_1_tFileOutputExcel_4 ? fitWidth_tFileOutputExcel_4[1]
									: currentWith_1_tFileOutputExcel_4 + 2;
						}

						if (outError.message != null) {

							// modif start

							jxl.write.WritableCell cell_2_tFileOutputExcel_4 = new jxl.write.Label(
									2, startRowNum_tFileOutputExcel_4
											+ nb_line_tFileOutputExcel_4,

									// modif end
									outError.message);
							// modif start
							// If we keep the cell format from the existing cell
							// in sheet

							// modif ends
							writableSheet_tFileOutputExcel_4
									.addCell(cell_2_tFileOutputExcel_4);
							int currentWith_2_tFileOutputExcel_4 = cell_2_tFileOutputExcel_4
									.getContents().trim().length();
							fitWidth_tFileOutputExcel_4[2] = fitWidth_tFileOutputExcel_4[2] > currentWith_2_tFileOutputExcel_4 ? fitWidth_tFileOutputExcel_4[2]
									: currentWith_2_tFileOutputExcel_4 + 2;
						}

						nb_line_tFileOutputExcel_4++;

						tos_count_tFileOutputExcel_4++;

						/**
						 * [tFileOutputExcel_4 main ] stop
						 */

					} // End of branch "outError"

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tFileOutputExcel_4 end ] start
				 */

				currentComponent = "tFileOutputExcel_4";

				writeableWorkbook_tFileOutputExcel_4.write();
				writeableWorkbook_tFileOutputExcel_4.close();

				globalMap.put("tFileOutputExcel_4_NB_LINE",
						nb_line_tFileOutputExcel_4);

				ok_Hash.put("tFileOutputExcel_4", true);
				end_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());

				tSendMail_2Process(globalMap);

				/**
				 * [tFileOutputExcel_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_4 finally ] start
				 */

				currentComponent = "tFileOutputExcel_4";

				/**
				 * [tFileOutputExcel_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tSendMail_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSendMail_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSendMail_2 begin ] start
				 */

				ok_Hash.put("tSendMail_2", false);
				start_Hash.put("tSendMail_2", System.currentTimeMillis());

				currentComponent = "tSendMail_2";

				int tos_count_tSendMail_2 = 0;

				/**
				 * [tSendMail_2 begin ] stop
				 */

				/**
				 * [tSendMail_2 main ] start
				 */

				currentComponent = "tSendMail_2";

				String smtpHost_tSendMail_2 = "smtp.gmail.com";
				String smtpPort_tSendMail_2 = "465";
				String from_tSendMail_2 = ("TAlEND@DATA_FUTURE.com");
				String to_tSendMail_2 = ("zaydan.malika@gmail.com").replace(
						";", ",");
				String cc_tSendMail_2 = (("") == null || "".equals("")) ? null
						: ("").replace(";", ",");
				String bcc_tSendMail_2 = (("") == null || "".equals("")) ? null
						: ("").replace(";", ",");
				String subject_tSendMail_2 = ("Rapport exceptions");

				java.util.List<java.util.Map<String, String>> headers_tSendMail_2 = new java.util.ArrayList<java.util.Map<String, String>>();
				java.util.List<String> attachments_tSendMail_2 = new java.util.ArrayList<String>();
				java.util.List<String> contentTransferEncoding_tSendMail_2 = new java.util.ArrayList<String>();
				attachments_tSendMail_2
						.add("C:/Users/Lenovo/Desktop/tutoTalend/ErrorFile.xls");
				contentTransferEncoding_tSendMail_2.add("DEFAULT");

				String message_tSendMail_2 = (("vous trouvez ci-join le rapport d'exception du job.") == null || ""
						.equals("vous trouvez ci-join le rapport d'exception du job.")) ? "\"\""
						: ("vous trouvez ci-join le rapport d'exception du job.");
				java.util.Properties props_tSendMail_2 = System.getProperties();
				props_tSendMail_2.put("mail.smtp.host", smtpHost_tSendMail_2);
				props_tSendMail_2.put("mail.smtp.port", smtpPort_tSendMail_2);
				props_tSendMail_2.put("mail.mime.encodefilename", "true");
				props_tSendMail_2.put("mail.smtp.starttls.enable", "true");
				java.security.Security
						.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
				props_tSendMail_2.put("mail.smtp.socketFactory.class",
						"javax.net.ssl.SSLSocketFactory");
				props_tSendMail_2.put("mail.smtp.socketFactory.fallback",
						"false");
				props_tSendMail_2.put("mail.smtp.socketFactory.port",
						smtpPort_tSendMail_2);
				try {

					props_tSendMail_2.put("mail.smtp.auth", "true");
					javax.mail.Session session_tSendMail_2 = javax.mail.Session
							.getInstance(props_tSendMail_2,
									new javax.mail.Authenticator() {
										protected javax.mail.PasswordAuthentication getPasswordAuthentication() {

											final String decryptedPassword_tSendMail_2 = routines.system.PasswordEncryptUtil
													.decryptPassword("e55dbe8533b14c2746daf2ca0aaa3128");

											return new javax.mail.PasswordAuthentication(
													"zaydan.malika@gmail.com",
													decryptedPassword_tSendMail_2);
										}
									});

					javax.mail.Message msg_tSendMail_2 = new javax.mail.internet.MimeMessage(
							session_tSendMail_2);
					msg_tSendMail_2
							.setFrom(new javax.mail.internet.InternetAddress(
									from_tSendMail_2, null));
					msg_tSendMail_2.setRecipients(
							javax.mail.Message.RecipientType.TO,
							javax.mail.internet.InternetAddress.parse(
									to_tSendMail_2, false));
					if (cc_tSendMail_2 != null)
						msg_tSendMail_2.setRecipients(
								javax.mail.Message.RecipientType.CC,
								javax.mail.internet.InternetAddress.parse(
										cc_tSendMail_2, false));
					if (bcc_tSendMail_2 != null)
						msg_tSendMail_2.setRecipients(
								javax.mail.Message.RecipientType.BCC,
								javax.mail.internet.InternetAddress.parse(
										bcc_tSendMail_2, false));
					msg_tSendMail_2.setSubject(subject_tSendMail_2);

					for (int i_tSendMail_2 = 0; i_tSendMail_2 < headers_tSendMail_2
							.size(); i_tSendMail_2++) {
						java.util.Map<String, String> header_tSendMail_2 = headers_tSendMail_2
								.get(i_tSendMail_2);
						msg_tSendMail_2.setHeader(
								header_tSendMail_2.get("KEY"),
								header_tSendMail_2.get("VALUE"));
					}
					msg_tSendMail_2.setSentDate(new Date());
					msg_tSendMail_2.setHeader("X-Priority", "3"); // High->1
																	// Normal->3
																	// Low->5
					javax.mail.Multipart mp_tSendMail_2 = new javax.mail.internet.MimeMultipart();
					javax.mail.internet.MimeBodyPart mbpText_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
					mbpText_tSendMail_2.setText(message_tSendMail_2,
							"ISO-8859-15", "plain");
					mp_tSendMail_2.addBodyPart(mbpText_tSendMail_2);

					javax.mail.internet.MimeBodyPart mbpFile_tSendMail_2 = null;

					for (int i_tSendMail_2 = 0; i_tSendMail_2 < attachments_tSendMail_2
							.size(); i_tSendMail_2++) {
						String filename_tSendMail_2 = attachments_tSendMail_2
								.get(i_tSendMail_2);
						javax.activation.FileDataSource fds_tSendMail_2 = null;
						java.io.File file_tSendMail_2 = new java.io.File(
								filename_tSendMail_2);

						if (!file_tSendMail_2.exists()) {
							continue;
						}

						if (file_tSendMail_2.isDirectory()) {
							java.io.File[] subFiles_tSendMail_2 = file_tSendMail_2
									.listFiles();
							for (java.io.File subFile_tSendMail_2 : subFiles_tSendMail_2) {
								if (subFile_tSendMail_2.isFile()) {
									fds_tSendMail_2 = new javax.activation.FileDataSource(
											subFile_tSendMail_2
													.getAbsolutePath());
									mbpFile_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
									mbpFile_tSendMail_2
											.setDataHandler(new javax.activation.DataHandler(
													fds_tSendMail_2));
									mbpFile_tSendMail_2
											.setFileName(javax.mail.internet.MimeUtility
													.encodeText(fds_tSendMail_2
															.getName()));
									if (contentTransferEncoding_tSendMail_2
											.get(i_tSendMail_2)
											.equalsIgnoreCase("base64")) {
										mbpFile_tSendMail_2.setHeader(
												"Content-Transfer-Encoding",
												"base64");
									}
									mp_tSendMail_2
											.addBodyPart(mbpFile_tSendMail_2);
								}
							}
						} else {
							mbpFile_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
							fds_tSendMail_2 = new javax.activation.FileDataSource(
									filename_tSendMail_2);
							mbpFile_tSendMail_2
									.setDataHandler(new javax.activation.DataHandler(
											fds_tSendMail_2));
							mbpFile_tSendMail_2
									.setFileName(javax.mail.internet.MimeUtility
											.encodeText(fds_tSendMail_2
													.getName()));
							if (contentTransferEncoding_tSendMail_2.get(
									i_tSendMail_2).equalsIgnoreCase("base64")) {
								mbpFile_tSendMail_2.setHeader(
										"Content-Transfer-Encoding", "base64");
							}
							mp_tSendMail_2.addBodyPart(mbpFile_tSendMail_2);
						}
					}
					// -- set the content --
					msg_tSendMail_2.setContent(mp_tSendMail_2);
					// add handlers for main MIME types
					javax.activation.MailcapCommandMap mc_tSendMail_2 = (javax.activation.MailcapCommandMap) javax.activation.CommandMap
							.getDefaultCommandMap();
					mc_tSendMail_2
							.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
					mc_tSendMail_2
							.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
					mc_tSendMail_2
							.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
					mc_tSendMail_2
							.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
					mc_tSendMail_2
							.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
					javax.activation.CommandMap
							.setDefaultCommandMap(mc_tSendMail_2);
					// -- Send the message --
					javax.mail.Transport.send(msg_tSendMail_2);
				} catch (java.lang.Exception e) {

					throw (e);

				} finally {
					props_tSendMail_2.remove("mail.smtp.host");
					props_tSendMail_2.remove("mail.smtp.port");

					props_tSendMail_2.remove("mail.mime.encodefilename");

					props_tSendMail_2.remove("mail.smtp.starttls.enable");

					props_tSendMail_2.remove("mail.smtp.socketFactory.class");
					props_tSendMail_2
							.remove("mail.smtp.socketFactory.fallback");
					props_tSendMail_2.remove("mail.smtp.socketFactory.port");

					props_tSendMail_2.remove("mail.smtp.auth");
				}

				tos_count_tSendMail_2++;

				/**
				 * [tSendMail_2 main ] stop
				 */

				/**
				 * [tSendMail_2 end ] start
				 */

				currentComponent = "tSendMail_2";

				ok_Hash.put("tSendMail_2", true);
				end_Hash.put("tSendMail_2", System.currentTimeMillis());

				/**
				 * [tSendMail_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSendMail_2 finally ] start
				 */

				currentComponent = "tSendMail_2";

				/**
				 * [tSendMail_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSendMail_2_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_2 begin ] start
				 */

				ok_Hash.put("tPrejob_2", false);
				start_Hash.put("tPrejob_2", System.currentTimeMillis());

				currentComponent = "tPrejob_2";

				int tos_count_tPrejob_2 = 0;

				/**
				 * [tPrejob_2 begin ] stop
				 */

				/**
				 * [tPrejob_2 main ] start
				 */

				currentComponent = "tPrejob_2";

				tos_count_tPrejob_2++;

				/**
				 * [tPrejob_2 main ] stop
				 */

				/**
				 * [tPrejob_2 end ] start
				 */

				currentComponent = "tPrejob_2";

				ok_Hash.put("tPrejob_2", true);
				end_Hash.put("tPrejob_2", System.currentTimeMillis());

				tMysqlConnection_2Process(globalMap);

				/**
				 * [tPrejob_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_2 finally ] start
				 */

				currentComponent = "tPrejob_2";

				/**
				 * [tPrejob_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_2_SUBPROCESS_STATE", 1);
	}

	public void tMysqlConnection_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlConnection_2 begin ] start
				 */

				ok_Hash.put("tMysqlConnection_2", false);
				start_Hash
						.put("tMysqlConnection_2", System.currentTimeMillis());

				currentComponent = "tMysqlConnection_2";

				int tos_count_tMysqlConnection_2 = 0;

				String properties_tMysqlConnection_2 = "noDatetimeStringSync=true";
				if (properties_tMysqlConnection_2 == null
						|| properties_tMysqlConnection_2.trim().length() == 0) {
					properties_tMysqlConnection_2 += "rewriteBatchedStatements=true";
				} else if (properties_tMysqlConnection_2 != null
						&& !properties_tMysqlConnection_2
								.contains("rewriteBatchedStatements")) {
					properties_tMysqlConnection_2 += "&rewriteBatchedStatements=true";
				}

				String url_tMysqlConnection_2 = "jdbc:mysql://" + "localhost"
						+ ":" + "3306" + "/" + "talend" + "?"
						+ properties_tMysqlConnection_2;

				String dbUser_tMysqlConnection_2 = "root";

				final String decryptedPassword_tMysqlConnection_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("f4f7aba1746784ea");
				String dbPwd_tMysqlConnection_2 = decryptedPassword_tMysqlConnection_2;

				java.sql.Connection conn_tMysqlConnection_2 = null;

				String driverClass_tMysqlConnection_2 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlConnection_2);

				conn_tMysqlConnection_2 = java.sql.DriverManager.getConnection(
						url_tMysqlConnection_2, dbUser_tMysqlConnection_2,
						dbPwd_tMysqlConnection_2);

				globalMap.put("conn_tMysqlConnection_2",
						conn_tMysqlConnection_2);
				if (null != conn_tMysqlConnection_2) {

					conn_tMysqlConnection_2.setAutoCommit(false);
				}

				globalMap.put("conn_tMysqlConnection_2",
						conn_tMysqlConnection_2);

				globalMap.put("db_tMysqlConnection_2", "talend");

				/**
				 * [tMysqlConnection_2 begin ] stop
				 */

				/**
				 * [tMysqlConnection_2 main ] start
				 */

				currentComponent = "tMysqlConnection_2";

				tos_count_tMysqlConnection_2++;

				/**
				 * [tMysqlConnection_2 main ] stop
				 */

				/**
				 * [tMysqlConnection_2 end ] start
				 */

				currentComponent = "tMysqlConnection_2";

				ok_Hash.put("tMysqlConnection_2", true);
				end_Hash.put("tMysqlConnection_2", System.currentTimeMillis());

				/**
				 * [tMysqlConnection_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tMysqlConnection_2:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tOracleConnection_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlConnection_2 finally ] start
				 */

				currentComponent = "tMysqlConnection_2";

				/**
				 * [tMysqlConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlConnection_2_SUBPROCESS_STATE", 1);
	}

	public void tOracleConnection_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleConnection_2 begin ] start
				 */

				ok_Hash.put("tOracleConnection_2", false);
				start_Hash.put("tOracleConnection_2",
						System.currentTimeMillis());

				currentComponent = "tOracleConnection_2";

				int tos_count_tOracleConnection_2 = 0;

				String url_tOracleConnection_2 = "jdbc:oracle:thin:@"
						+ "localhost" + ":" + "1522" + ":" + "xe";
				globalMap.put("connectionType_" + "tOracleConnection_2",
						"ORACLE_SID");

				String dbUser_tOracleConnection_2 = "malika";

				final String decryptedPassword_tOracleConnection_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("cfd58a292661e151");
				String dbPwd_tOracleConnection_2 = decryptedPassword_tOracleConnection_2;

				java.sql.Connection conn_tOracleConnection_2 = null;

				String driverClass_tOracleConnection_2 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleConnection_2);

				conn_tOracleConnection_2 = java.sql.DriverManager
						.getConnection(url_tOracleConnection_2,
								dbUser_tOracleConnection_2,
								dbPwd_tOracleConnection_2);

				globalMap.put("conn_tOracleConnection_2",
						conn_tOracleConnection_2);
				if (null != conn_tOracleConnection_2) {

					conn_tOracleConnection_2.setAutoCommit(false);
				}
				globalMap.put("host_" + "tOracleConnection_2", "localhost");
				globalMap.put("port_" + "tOracleConnection_2", "1522");
				globalMap.put("dbname_" + "tOracleConnection_2", "xe");

				globalMap.put("conn_" + "tOracleConnection_2",
						conn_tOracleConnection_2);
				globalMap.put("dbschema_" + "tOracleConnection_2", "malika");
				globalMap.put("username_" + "tOracleConnection_2", "malika");
				globalMap.put("password_" + "tOracleConnection_2",
						dbPwd_tOracleConnection_2);

				/**
				 * [tOracleConnection_2 begin ] stop
				 */

				/**
				 * [tOracleConnection_2 main ] start
				 */

				currentComponent = "tOracleConnection_2";

				tos_count_tOracleConnection_2++;

				/**
				 * [tOracleConnection_2 main ] stop
				 */

				/**
				 * [tOracleConnection_2 end ] start
				 */

				currentComponent = "tOracleConnection_2";

				ok_Hash.put("tOracleConnection_2", true);
				end_Hash.put("tOracleConnection_2", System.currentTimeMillis());

				/**
				 * [tOracleConnection_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tOracleConnection_2 finally ] start
				 */

				currentComponent = "tOracleConnection_2";

				/**
				 * [tOracleConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 1);
	}

	public void tWarn_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_1 begin ] start
				 */

				ok_Hash.put("tWarn_1", false);
				start_Hash.put("tWarn_1", System.currentTimeMillis());

				currentComponent = "tWarn_1";

				int tos_count_tWarn_1 = 0;

				/**
				 * [tWarn_1 begin ] stop
				 */

				/**
				 * [tWarn_1 main ] start
				 */

				currentComponent = "tWarn_1";

				resumeUtil
						.addLog("USER_DEF_LOG",
								"NODE:tWarn_1",
								"",
								Thread.currentThread().getId() + "",
								"WARN",
								"",
								"une erreur lors de l'établissement des connections aux bases de données",
								"", "");
				tLogCatcher_1
						.addMessage(
								"tWarn",
								"tWarn_1",
								4,
								"une erreur lors de l'établissement des connections aux bases de données",
								42);
				tLogCatcher_1Process(globalMap);
				globalMap
						.put("tWarn_1_WARN_MESSAGES",
								"une erreur lors de l'établissement des connections aux bases de données");
				globalMap.put("tWarn_1_WARN_PRIORITY", 4);
				globalMap.put("tWarn_1_WARN_CODE", 42);

				tos_count_tWarn_1++;

				/**
				 * [tWarn_1 main ] stop
				 */

				/**
				 * [tWarn_1 end ] start
				 */

				currentComponent = "tWarn_1";

				ok_Hash.put("tWarn_1", true);
				end_Hash.put("tWarn_1", System.currentTimeMillis());

				/**
				 * [tWarn_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_1 finally ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Mapping_DB Mapping_DBClass = new Mapping_DB();

		int exitCode = Mapping_DBClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Mapping_DB.class.getClassLoader()
					.getResourceAsStream(
							"projectname/mapping_db_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.fileErrorName = (String) context
					.getProperty("fileErrorName");
			context.nameOkFile = (String) context.getProperty("nameOkFile");
			context.msgErreur = (String) context.getProperty("msgErreur");
			context.ErrorSJob = (String) context.getProperty("ErrorSJob");
			context.SSJobOK = (String) context.getProperty("SSJobOK");
			context.PasseJobSuivant = (String) context
					.getProperty("PasseJobSuivant");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("fileErrorName")) {
				context.fileErrorName = (String) parentContextMap
						.get("fileErrorName");
			}
			if (parentContextMap.containsKey("nameOkFile")) {
				context.nameOkFile = (String) parentContextMap
						.get("nameOkFile");
			}
			if (parentContextMap.containsKey("msgErreur")) {
				context.msgErreur = (String) parentContextMap.get("msgErreur");
			}
			if (parentContextMap.containsKey("ErrorSJob")) {
				context.ErrorSJob = (String) parentContextMap.get("ErrorSJob");
			}
			if (parentContextMap.containsKey("SSJobOK")) {
				context.SSJobOK = (String) parentContextMap.get("SSJobOK");
			}
			if (parentContextMap.containsKey("PasseJobSuivant")) {
				context.PasseJobSuivant = (String) parentContextMap
						.get("PasseJobSuivant");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		try {
			errorCode = null;
			Implicit_Context_DelimitedProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_Implicit_Context_Delimited) {
			globalMap.put("Implicit_Context_Delimited_SUBPROCESS_STATE", -1);

			e_Implicit_Context_Delimited.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_2) {
			globalMap.put("tPrejob_2_SUBPROCESS_STATE", -1);

			e_tPrejob_2.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tOracleInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tOracleInput_1) {
			globalMap.put("tOracleInput_1_SUBPROCESS_STATE", -1);

			e_tOracleInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Mapping_DB");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();
	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tMysqlConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tOracleConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tMysqlConnection_2",
				globalMap.get("conn_tMysqlConnection_2"));
		connections.put("conn_tOracleConnection_2",
				globalMap.get("conn_tOracleConnection_2"));
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 192839 characters generated by Talend Open Studio for Data Integration on the
 * 10 mai 2018 10:55:26 WEST
 ************************************************************************************************/
